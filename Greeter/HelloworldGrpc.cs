// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: helloworld.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Greeter {
  /// <summary>
  ///  The greeting service definition.
  /// </summary>
  public static class Greeter
  {
    static readonly string __ServiceName = "Greeter.Greeter";

    static readonly Marshaller<global::Greeter.HelloRequest> __Marshaller_HelloRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greeter.HelloRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Greeter.HelloReply> __Marshaller_HelloReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greeter.HelloReply.Parser.ParseFrom);

    static readonly Method<global::Greeter.HelloRequest, global::Greeter.HelloReply> __Method_SayHello = new Method<global::Greeter.HelloRequest, global::Greeter.HelloReply>(
        MethodType.Unary,
        __ServiceName,
        "SayHello",
        __Marshaller_HelloRequest,
        __Marshaller_HelloReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Greeter.HelloworldReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Greeter</summary>
    [System.Obsolete("Client side interfaced will be removed in the next release. Use client class directly.")]
    public interface IGreeterClient
    {
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      global::Greeter.HelloReply SayHello(global::Greeter.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      global::Greeter.HelloReply SayHello(global::Greeter.HelloRequest request, CallOptions options);
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      AsyncUnaryCall<global::Greeter.HelloReply> SayHelloAsync(global::Greeter.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      AsyncUnaryCall<global::Greeter.HelloReply> SayHelloAsync(global::Greeter.HelloRequest request, CallOptions options);
    }

    /// <summary>Interface of server-side implementations of Greeter</summary>
    [System.Obsolete("Service implementations should inherit from the generated abstract base class instead.")]
    public interface IGreeter
    {
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      global::System.Threading.Tasks.Task<global::Greeter.HelloReply> SayHello(global::Greeter.HelloRequest request, ServerCallContext context);
    }

    /// <summary>Base class for server-side implementations of Greeter</summary>
    public abstract class GreeterBase
    {
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Greeter.HelloReply> SayHello(global::Greeter.HelloRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Greeter</summary>
    #pragma warning disable 0618
    public class GreeterClient : ClientBase<GreeterClient>, IGreeterClient
    #pragma warning restore 0618
    {
      public GreeterClient(Channel channel) : base(channel)
      {
      }
      public GreeterClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      ///<summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GreeterClient() : base()
      {
      }
      ///<summary>Protected constructor to allow creation of configured clients.</summary>
      protected GreeterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::Greeter.HelloReply SayHello(global::Greeter.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SayHello(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::Greeter.HelloReply SayHello(global::Greeter.HelloRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayHello, null, options, request);
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual AsyncUnaryCall<global::Greeter.HelloReply> SayHelloAsync(global::Greeter.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SayHelloAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual AsyncUnaryCall<global::Greeter.HelloReply> SayHelloAsync(global::Greeter.HelloRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayHello, null, options, request);
      }
      protected override GreeterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GreeterClient(configuration);
      }
    }

    /// <summary>Creates a new client for Greeter</summary>
    public static GreeterClient NewClient(Channel channel)
    {
      return new GreeterClient(channel);
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(IGreeter serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_SayHello, serviceImpl.SayHello).Build();
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(GreeterBase serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_SayHello, serviceImpl.SayHello).Build();
    }

  }
}
#endregion
